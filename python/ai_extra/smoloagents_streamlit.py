# Port of SmolAgents Gradio interface to Streamlit
# Generated by Aider  with the prompt ! 'port following code from Gradio to Streamlit"
# Original source : https://github.com/huggingface/smolagents/blob/v1.2.2/src/smolagents/gradio_ui.py
# NOT FULLY TESTED !!

# Original license:
# Copyright 2024 The HuggingFace Inc. team. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import streamlit as st
from smolagents.agents import ActionStep, AgentStep, MultiStepAgent
from smolagents.types import AgentAudio, AgentImage, AgentText, handle_agent_output_types


def pull_messages_from_step(step_log: AgentStep, test_mode: bool = True):
    """Extract messages from agent steps for Streamlit display"""
    if isinstance(step_log, ActionStep):
        with st.chat_message("assistant"):
            st.write(step_log.llm_output or "")

        debug(step_log)

        if step_log.tool_calls is not None:
            for tool in step_log.tool_calls:
                used_code = tool.name == "code interpreter"
                content = tool.arguments
                if used_code:
                    content = f"```py\n{content}\n```"
                with st.chat_message("assistant"):
                    st.markdown(f"üõ†Ô∏è Used tool {tool.name}")
                    st.write(str(content))

        if step_log.observations is not None:
            with st.chat_message("assistant"):
                st.write(step_log.observations)

        if step_log.error is not None:
            with st.chat_message("assistant"):
                st.error(str(step_log.error))


def stream_to_streamlit(
    agent,
    task: str,
    test_mode: bool = False,
    reset_agent_memory: bool = False,
    **kwargs,
):
    """Runs an agent with the given task and streams the messages to Streamlit UI."""

    for step_log in agent.run(task, stream=True, reset=reset_agent_memory, **kwargs):
        pull_messages_from_step(step_log, test_mode=test_mode)

    final_answer = step_log  # Last log is the run's final_answer
    final_answer = handle_agent_output_types(final_answer)

    with st.chat_message("assistant"):
        if isinstance(final_answer, AgentText):
            st.markdown(f"**Final answer:**\n{final_answer.to_string()}\n")
        elif isinstance(final_answer, AgentImage):
            st.image(final_answer.to_string())
        elif isinstance(final_answer, AgentAudio):
            st.audio(final_answer.to_string())
        else:
            st.write(str(final_answer))


class StreamlitUI:
    """A one-line interface to launch your agent in Streamlit"""

    def __init__(self, agent: MultiStepAgent):
        self.agent = agent
        if "messages" not in st.session_state:
            st.session_state.messages = []

    def display_chat(self):
        """Display chat history and handle new input"""
        # Display chat messages from history
        for message in st.session_state.messages:
            with st.chat_message(message["role"]):
                st.markdown(message["content"])

        # Accept user input
        if prompt := st.chat_input("What would you like to ask the agent?"):
            # Add user message to chat history
            st.session_state.messages.append({"role": "user", "content": prompt})
            with st.chat_message("user"):
                st.markdown(prompt)

            # Display assistant response in chat message container
            stream_to_streamlit(self.agent, task=prompt, reset_agent_memory=False)

    def launch(self):
        """Launch the Streamlit interface"""
        st.title("SmolAgents Chat")
        st.image("https://em-content.zobj.net/source/twitter/53/robot-face_1f916.png", width=100)
        self.display_chat()
