"""
Port of SmolAgents Gradio interface to Streamlit
Generated by Aider  with the prompt :
   " Port following code from Gradio to Streamlit and replace it. Use the 'to_raw' method to use AgentImage in st.image().
     Replace relative import by absolute import from smolagents"
Original source : https://github.com/huggingface/smolagents/blob/main/src/smolagents/gradio_ui.py
NOT FULLY TESTED !!
"""

#!/usr/bin/env python
# coding=utf-8
# Copyright 2024 The HuggingFace Inc. team. All rights reserved.

import os
from typing import Optional

import streamlit as st
from smolagents.agents import ActionStep, AgentStepLog, MultiStepAgent
from smolagents.types import AgentAudio, AgentImage, AgentText, handle_agent_output_types


class StreamlitUI:
    """A one-line interface to launch your agent in Streamlit"""

    def __init__(self, agent: MultiStepAgent, file_upload_folder: str | None = None):
        self.agent = agent
        self.file_upload_folder = file_upload_folder
        if self.file_upload_folder is not None:
            if not os.path.exists(file_upload_folder):
                os.mkdir(file_upload_folder)

    def display_step(self, step_log: AgentStepLog):
        """Display agent steps in Streamlit"""
        if isinstance(step_log, ActionStep):
            with st.chat_message("assistant"):
                if step_log.llm_output:
                    st.write(step_log.llm_output)

                if step_log.tool_calls is not None:
                    first_tool_call = step_log.tool_calls[0]
                    used_code = first_tool_call.name == "code interpreter"
                    content = first_tool_call.arguments
                    if used_code:
                        content = f"```py\n{content}\n```"
                    st.write(f"üõ†Ô∏è Used tool {first_tool_call.name}")
                    st.write(content)

                if step_log.observations is not None:
                    st.write(step_log.observations)

                if step_log.error is not None:
                    st.error(str(step_log.error))

    def stream_to_streamlit(self, task: str, reset_agent_memory: bool = False, additional_args: Optional[dict] = None):
        """Runs an agent with the given task and streams the messages to Streamlit"""
        for step_log in self.agent.run(task, stream=True, reset=reset_agent_memory, additional_args=additional_args):
            self.display_step(step_log)
            yield step_log

    def launch(self):
        """Launch the Streamlit interface"""
        st.title("SmolAgents Interface")

        if "messages" not in st.session_state:
            st.session_state.messages = []

        if "file_uploads" not in st.session_state:
            st.session_state.file_uploads = []

        # Display chat history
        for message in st.session_state.messages:
            with st.chat_message(message["role"]):
                st.write(message["content"])

        # File upload
        if self.file_upload_folder is not None:
            uploaded_file = st.file_uploader("Upload a file", type=["pdf", "docx", "txt"])
            if uploaded_file is not None:
                file_path = os.path.join(self.file_upload_folder, uploaded_file.name)
                with open(file_path, "wb") as f:
                    f.write(uploaded_file.getbuffer())
                st.session_state.file_uploads.append(file_path)
                st.success(f"File uploaded: {uploaded_file.name}")

        # Chat input
        if prompt := st.chat_input("Type your message..."):
            # Add user message to chat history
            st.session_state.messages.append({"role": "user", "content": prompt})

            # Display user message
            with st.chat_message("user"):
                st.write(prompt)

            # Display assistant response
            with st.chat_message("assistant"):
                for step_log in self.stream_to_streamlit(prompt):
                    final_answer = step_log  # Last log is the run's final_answer
                    final_answer = handle_agent_output_types(final_answer)

                    if isinstance(final_answer, AgentText):
                        st.write(f"**Final answer:**\n{final_answer.to_string()}")
                    elif isinstance(final_answer, AgentImage):
                        st.image(final_answer.to_raw(), use_column_width=True)
                    elif isinstance(final_answer, AgentAudio):
                        st.audio(final_answer.to_string())
                    else:
                        st.write(str(final_answer))

                    # Add assistant response to chat history
                    st.session_state.messages.append({"role": "assistant", "content": str(final_answer)})
